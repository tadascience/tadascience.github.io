[
  {
    "objectID": "posts/2024-02-09-react/index.html",
    "href": "posts/2024-02-09-react/index.html",
    "title": "📦 react",
    "section": "",
    "text": "I’ve had a few opportunities to do some shiny apps recently, and an old itch resurfaced, and so what I tend to do in those situations is make a package 📦, so let me introduce the react package. it’s on CRAN already, so you can get it the usual ways.\nPerhaps you are here because you believe this has something to do with React, and in that case I’m sorry to disappoint. However, please stay, I won’t use much of your time 🐇.\nTake this code for a simple shiny server function:\n\nserver &lt;- function(input, output) {\n\n  dataInput &lt;- reactive({\n    getSymbols(input$symb, src = \"yahoo\",\n               from = input$dates[1],\n               to = input$dates[2],\n               auto.assign = FALSE)\n  })\n\n  output$plot &lt;- renderPlot({\n    chartSeries(dataInput(), theme = chartTheme(\"white\"),\n                type = \"line\", log.scale = input$log, TA = NULL)\n  })\n\n}\n\nIt defines the dataInput reactive, and then uses it in the renderPlot(expr=) context by calling the function, i.e. dataInput() . The issue that I have with this is that one cannot distinguish easily between a call to a reactive expression, and a simple function call, e.g. a geom_point() call.\nThe react package is there to help with this insignificant problem. Given the same reactive, with this 📦 you can instead invoke it with one of these forms: react$dataInput , react[dataInput] or react[dataInput()] so that the server code becomes for example:\n\nserver &lt;- function(input, output) {\n\n  dataInput &lt;- reactive({\n    getSymbols(input$symb, src = \"yahoo\",\n               from = input$dates[1],\n               to = input$dates[2],\n               auto.assign = FALSE)\n  })\n\n  output$plot &lt;- renderPlot({\n    chartSeries(react$dataInput, theme = chartTheme(\"white\"),\n                type = \"line\", log.scale = input$log, TA = NULL)\n  })\n\n}\n\nWhat I like about this is that it makes inputs and reactive look more alike, and also makes it easier to search for reactive calls in your ide, etc …\nThe dev version also make react an identity function, so that you can have a 4th alternative: react(dataInput()) and here the idea is that you’d also wrap inputs, e.g. react(input$symb) for improved discoverability. This will, unless I realize it’s dumb 😵‍💫 be released in the spring 🌱 version of react"
  },
  {
    "objectID": "posts/2024-02-02-tada-verse-poems/index.html",
    "href": "posts/2024-02-02-tada-verse-poems/index.html",
    "title": "tada::verse() poetry",
    "section": "",
    "text": "I just received the Thanks, on its way to CRAN email 📧 about the tada package 🎉, so it’s a good time for a celebration, and what better way to celebrate than with a dash of poetry.\nThe @dev version gains a verse() function to write poetry about R packages, thanks for the heavy lifting of the mlverse/chattr 📦. We try to maintain a @main branch that could be released at any time, and chattr is not yet released. We hope it will be for the spring 🌤️ release of tada, but it will be for the meantime available in the @dev branch.\n\n\n\n\n\n── chattr \n\n\n• Provider: Open AI - Chat Completions\n\n\n• Path/URL: https://api.openai.com/v1/chat/completions\n\n\n• Model: gpt-3.5-turbo\n\n\nSo let’s dive right in and do some ggplot2 poetry 🪶\n\n\n\n\n\nFor additional fun, we can write some poetry about a random package we discover with tada::pkg_roulette()\n\ntada::pkg_roulette() |&gt; tada::verse()"
  },
  {
    "objectID": "posts/2024-03-02-february-2024/index.html",
    "href": "posts/2024-03-02-february-2024/index.html",
    "title": "February 2024",
    "section": "",
    "text": "tada ⬢ science is.\nWe’ll get to what it is and what it does soon enough, but it is, it exists as a company, where as before it was just a name I used. We might start to we more than we I as a consequence, but for now let me wrap what happened in february."
  },
  {
    "objectID": "posts/2024-03-02-february-2024/index.html#ai-poetry",
    "href": "posts/2024-03-02-february-2024/index.html#ai-poetry",
    "title": "February 2024",
    "section": "AI poetry",
    "text": "AI poetry\nWe started off by adding the   tada::verse()  function to generate praise poetry using ChatGPT through the   chattr  📦.\nThis was fun, but quickly opened a can of worms, because   tada::verse()  would not work for some packages, because of a bug in   chattr . At least that’s what I initially assumed, and logged an issue for it.\n   chattr  is not a trivial package, and so I went on a little debugging quest to find out what the problem was, and developed   snitch  along the way to help with tracing.   snitch  has helped, but it is still a little clunky, so it will stay unreleased until it is somewhat better, or just sit in the unreleased 📦 graveyard.\n turned out the underlying problem was a missed opportunity in   httr2 , which was the perfect excuse to dive in, learn about   httr2  and eventually settle with a proposal to add a round= argument to   httr2::req_perform_stream() . It has been great working on this with Hadley on the pull request. I sure was easier that we have a lot of experience working together, but I believe we both contributed to the vision and ended up with a simple, nice and extensible way to solve the initial problem. Long story short, when you stream text with   httr2::req_perform_stream() , you just do httr2::req_perform_stream(round = \"line\").\n For   valentine  we went a different way to engage with ChatGPT and simply use the   openai  package instead of   chattr . That loses sreaming along the way, but that’s fine. Now that   httr2::req_perform_stream()  is more resilient, we can imagine to contribute a streaming feature to   openai . Similarly, we might switch to using Gemini and contribute to   gemini.R  or develop a mistral.ai package to use Mistral instead.   valentine  was fun to play with."
  },
  {
    "objectID": "posts/2024-03-02-february-2024/index.html#react",
    "href": "posts/2024-03-02-february-2024/index.html#react",
    "title": "February 2024",
    "section": "react",
    "text": "react\n   react  is a different beast, it was initially meant as a goofy 📦 but it git some engagement on various socials, so it might have more potential than initially envisionned, or maybe this is just because it’s a   shiny  ✨ thing ."
  },
  {
    "objectID": "posts/2024-03-02-february-2024/index.html#link",
    "href": "posts/2024-03-02-february-2024/index.html#link",
    "title": "February 2024",
    "section": "link",
    "text": "link\nBecause February was a slow month, I ended up with some available bandwidth, and decided to time block feb 23 to learn about and initiate contributions to the pharmaverse. I’m coming to this with extensive experience in a different verse, but because the pharma⬡verse is not a trivial collection of packages, I approached the day by initiating a conversation on the slack to collect ideas on how to best allocate my time. I was lucky enough to get ideas from the community, and I look forward to do more in depth pharma⬡verse work in the future.\n However, the day quickly evolved to crafting the   link  package that is designed to help with automatically generate links to packages and functions in your quarto/Rmarkdown posts, i.e. these links are generated automatically:   link  and   dplyr::across() . Kudos to the   downlit  package that does most of the heavy lifting.\nI like that throughout the day, the solution got more and more generic, to the point that   link  eventually is not pharma⬡verse specific, but rather a general tool to help with blogging … It might be interesting to go further in generality and include the feature automatically in quarto. To be continued."
  },
  {
    "objectID": "posts/2024-03-02-february-2024/index.html#duckdb",
    "href": "posts/2024-03-02-february-2024/index.html#duckdb",
    "title": "February 2024",
    "section": "duckdb",
    "text": "duckdb\n Last month, I started working with cynkra on a duckdb extension 🦆 that will eventually contribute to   duckplyr .   duckplyr  is a   dplyr  replacement built natively on top of   duckdb , that’s 😎. I look forward to contribute more to this. If you’re curious about it, the best place is this posit::conf talk from Kirill."
  },
  {
    "objectID": "posts/2024-03-02-february-2024/index.html#to-be-continued",
    "href": "posts/2024-03-02-february-2024/index.html#to-be-continued",
    "title": "February 2024",
    "section": "To be continued",
    "text": "To be continued\nThat’s a wrap for this wrapup, March will look different for tada ⬢ science, but the dedication to R is intact."
  },
  {
    "objectID": "posts/2024-02-14-roses-are-red/index.html",
    "href": "posts/2024-02-14-roses-are-red/index.html",
    "title": "🌹 Spread the 💜 for R 📦 with valentine::roses()",
    "section": "",
    "text": "To get ready, at least in the R world 😝, for Valentine’s day, I’ve cooked a little R 📦 to spread the love by generating Roses are Red, … poems about packages using ChatGPT though the openai package.\nYou can install it with pak::pak(\"tadascience/valentine\") and perhaps it will be released to CRAN in time for Valentine’s day, it’s in the pipeline.\nIf you are not already set with an OPENAI_API_KEY, see you later in this article, otherwise let’s make some 🤖 poetry 🪶 📝\n\nvalentine::roses(\"tidyverse\")\n\n🌹 Roses are red, 📦\n✨ tidyverse is my love, 💕\n💡 It makes coding fun, 🤩\n🌈 With tidy data, I rise above! 📊\n\n\nYou can tweak the prompt that is sent with the hint= argument.\n\nvalentine::roses(\"lubridate\", hint = \"make it kinky\")\n\nRoses are red 🌹\nLubridate keeps time in your bed 🕒💤\nDate parsing and manipulation so fine 😍💃\nIt's the R package that sparks a kinky line! 🔥😉\n\n\nBefore you can use valentine::roses() you need to be setup with an API key you can get from OpenAI. Once you’re there, click the “Create new secret key”, name it whatever you like:\n\n\n\n\n\nAnd then copy the secret key.\n\n\n\n\n\n… and store it in your .Renviron file, e.g. by using usethis::edit_r_environ()\n\n\n\n\n\nRestart R, and 🦆\n\nvalentine::roses(\"data.table\")\n\nRoses are 🔴, \nData.table is 💪,\nEfficient and 🚀,\nIt's a 🎁 to me!"
  },
  {
    "objectID": "posts/2024-02-04-snitch/index.html",
    "href": "posts/2024-02-04-snitch/index.html",
    "title": "snitch",
    "section": "",
    "text": "The snitch 📦 is one of those weekend experiments. In this particular case, it comes from I don’t know how to use base::trace() and I want a thing that tells me how a particular function is called, so I want to spy on a function.\nThe name and logo of the package might be because I’ve started to read the first Harry Potter book to my 6 years old daughter 🧙.\nDALL-E gave a decent logo once I removed explicit HP references 🤷‍♂️, i.e. “a small gold colored spherical object with wings” instead of “the golden snitch”:\n\nCan you make an hexagon logo for an R package called snitch, inspired by a small gold colored spherical object with wings. The package goal is to spy on function calls.\n\nAnyway 🤖, let’s dive in, you can install it with pak::pak(\"tadascience/snitch\") I’m not sure at this point this will make its way to CRAN.\nThe package has snitch::fun() to spy on a function … (I don’t know how to get the colors in quarto so let’s go with a screenshot). You first get a rule with breadcrumbs of functions that are spyed on, and then their arguments, courtesy of ls.str() :\n\n\n\n\n\n… and snitch::pkg() to spy on functions from a package.\n\nsuppressPackageStartupMessages(library(dplyr))\nsnitch::pkg(\"dplyr\", pattern = \"^summarise_\")\n\nmtcars %&gt;%\n  summarise(mean = mean(disp), n = n())\n\n── summarise_cols ──────────────────────────────────────────────────────────────\n   by : List of 3\n    $ type : chr \"ungrouped\"\n    $ names: chr(0) \n    $ data : tibble [1 × 1] (S3: tbl_df/tbl/data.frame)\n   data : 'data.frame': 32 obs. of  11 variables:\n    $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n    $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n    $ disp: num  160 160 108 258 360 ...\n    $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n    $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n    $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n    $ qsec: num  16.5 17 18.6 19.4 17 ...\n    $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n    $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n    $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n    $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n   dots : List of 2\n    $ mean: language ~mean(disp)\n    $ n   : language ~n()\n   error_call : &lt;environment: 0x107937698&gt; \n   verb :  chr \"summarise\"\n── summarise_cols ⬢ FUN ────────────────────────────────────────────────────────\n   mask : Classes 'DataMask', 'R6' &lt;DataMask&gt;\n     Public:\n       add_one: function (name, chunks, result) \n       clone: function (deep = FALSE) \n       current_cols: function (vars) \n       current_key: function () \n       current_non_group_vars: function () \n       current_rows: function () \n       current_vars: function () \n       eval_all: function (quo) \n       eval_all_filter: function (quos, env_filter) \n       eval_all_mutate: function (quo) \n       eval_all_summarise: function (quo) \n       forget: function () \n       get_current_data: function (groups = TRUE) \n       get_current_group_id: function () \n       get_current_group_id_mutable: function () \n       get_current_group_size: function () \n       get_current_group_size_mutable: function () \n       get_keys: function () \n       get_rlang_mask: function () \n       get_rows: function () \n       get_size: function () \n       get_used: function () \n       initialize: function (data, by, verb, error_call) \n       is_grouped: function () \n       is_rowwise: function () \n       pick_current: function (vars) \n       remove: function (name) \n       resolve: function (name) \n       set_current_group: function (group) \n       unused_vars: function () \n     Private:\n       by_names: \n       chops: environment\n       current_data: list\n       env_current_group_info: environment\n       env_mask_bindings: environment\n       grouped: FALSE\n       keys: tbl_df, tbl, data.frame\n       rows: vctrs_list_of, vctrs_vctr, list\n       rowwise: FALSE\n       size: 32\n       verb: summarise \n   quo :  language ~mean(disp)\n── summarise_cols ⬢ FUN ────────────────────────────────────────────────────────\n   mask : Classes 'DataMask', 'R6' &lt;DataMask&gt;\n     Public:\n       add_one: function (name, chunks, result) \n       clone: function (deep = FALSE) \n       current_cols: function (vars) \n       current_key: function () \n       current_non_group_vars: function () \n       current_rows: function () \n       current_vars: function () \n       eval_all: function (quo) \n       eval_all_filter: function (quos, env_filter) \n       eval_all_mutate: function (quo) \n       eval_all_summarise: function (quo) \n       forget: function () \n       get_current_data: function (groups = TRUE) \n       get_current_group_id: function () \n       get_current_group_id_mutable: function () \n       get_current_group_size: function () \n       get_current_group_size_mutable: function () \n       get_keys: function () \n       get_rlang_mask: function () \n       get_rows: function () \n       get_size: function () \n       get_used: function () \n       initialize: function (data, by, verb, error_call) \n       is_grouped: function () \n       is_rowwise: function () \n       pick_current: function (vars) \n       remove: function (name) \n       resolve: function (name) \n       set_current_group: function (group) \n       unused_vars: function () \n     Private:\n       by_names: \n       chops: environment\n       current_data: list\n       env_current_group_info: environment\n       env_mask_bindings: environment\n       grouped: FALSE\n       keys: tbl_df, tbl, data.frame\n       rows: vctrs_list_of, vctrs_vctr, list\n       rowwise: FALSE\n       size: 32\n       verb: summarise \n   quo :  language ~n()\n── summarise_build ─────────────────────────────────────────────────────────────\n   by : List of 3\n    $ type : chr \"ungrouped\"\n    $ names: chr(0) \n    $ data : tibble [1 × 1] (S3: tbl_df/tbl/data.frame)\n   cols : List of 3\n    $ new    :List of 2\n    $ sizes  : int 1\n    $ all_one: logi TRUE\n\n\n      mean  n\n1 230.7219 32\n\n\nIs it useful, I don’t know, but I like it, and I prefer typing snitch::fun() than remembering how to use trace()."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "February 2024\n\n\n\n\n\n\nwrapup\n\n\n\n📆 february 2024 tada⬢ science wrap up 🎉\n\n\n\n\n\nMar 2, 2024\n\n\nRomain François\n\n\n\n\n\n\n\n\n\n\n\n\n🔗 link\n\n\n\n\n\n\nR\n\n\npackage\n\n\nlink\n\n\n\nlink is a simple R 📦 that makes it easier to include links to packages pkgdown pages\n\n\n\n\n\nFeb 26, 2024\n\n\nRomain François\n\n\n\n\n\n\n\n\n\n\n\n\n🥩 raw strings 🧶\n\n\n\n\n\n\nR\n\n\nstring\n\n\nfacepalm\n\n\n\n\n\n\n\n\n\nFeb 17, 2024\n\n\nRomain François\n\n\n\n\n\n\n\n\n\n\n\n\n🧢 httr2::req_perform_stream(round = ) ⚾️\n\n\n\n\n\n\npackage\n\n\nhttr2\n\n\nR\n\n\nemoji\n\n\n\n\n\n\n\n\n\nFeb 15, 2024\n\n\nRomain François\n\n\n\n\n\n\n\n\n\n\n\n\n🌹 Spread the 💜 for R 📦 with valentine::roses()\n\n\n\n\n\n\npackage\n\n\nvalentine\n\n\npoetry\n\n\nai\n\n\nlove\n\n\n\nvalentine is a small R packages that uses ChatGPT via the openai package to generate roses are red … poetry about R packages. \n\n\n\n\n\nFeb 14, 2024\n\n\nRomain François\n\n\n\n\n\n\n\n\n\n\n\n\n📦 react\n\n\n\n\n\n\npackage\n\n\nreact\n\n\nshiny\n\n\n\nreact is a tiny package that intends to help with shiny reactivity\n\n\n\n\n\nFeb 9, 2024\n\n\nRomain François\n\n\n\n\n\n\n\n\n\n\n\n\nsnitch\n\n\n\n\n\n\nR\n\n\nsnitch\n\n\n\nThe experimental snitch 📦 spies on functions and packages. The name and logo are inspired from the Harry Potter world. \n\n\n\n\n\nFeb 4, 2024\n\n\nRomain François\n\n\n\n\n\n\n\n\n\n\n\n\ntada::verse() poetry\n\n\n\n\n\n\nR\n\n\nai\n\n\npoetry\n\n\ntada\n\n\n\nThe tada::verse() function writes poetry️ 🦋 about your R package 📦. \n\n\n\n\n\nFeb 2, 2024\n\n\nRomain François\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 2024\n\n\n\n\n\n\nwrapup\n\n\n\n📆 wrapping up january 2024 at tada⬢science, this was a busy month 🎉\n\n\n\n\n\nJan 31, 2024\n\n\nRomain François\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome to the tada⬢verse\n\n\n\n\n\n\ntada\n\n\npackage\n\n\nR\n\n\n\nThe tada⬢verse is a collection of 1 opinionated package for tada⬢science. Developed by the tada⬢science team of 😷 1, the tada⬢verse is built to flip and spin data 📊 into tada 🎉.\n\n\n\n\n\nJan 29, 2024\n\n\nRomain François\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "tada<span style='color:pink; font-size: 120%'>⬢</span>science",
    "section": "",
    "text": "🎉"
  },
  {
    "objectID": "posts/2024-02-26-link/index.html",
    "href": "posts/2024-02-26-link/index.html",
    "title": "🔗 link",
    "section": "",
    "text": "link  is a simple goofy R 📦 that makes it simple to include links to packages, e.g.   tidyverse ,   dplyr  and function calls   summarise()    ggplot()  in your .Rmd or .qmd files.\nThis works by setting the   knitr  text hook with   auto()  somewhere in your document. You can learn more about   knitr  hooks in the Writing knitr hooks article from Danielle Navarro’s Notes from a data witch blog.\n```{r}\n#| echo: false\nlink::auto(keep_braces = FALSE, keep_pkg_prefix = FALSE)\n```\nThe defaults keep_braces = TRUE and keep_pkg_prefix keeps the braces around the 📦 names and the package prefix in the calls. This is popular style but I don’t like it and find it too noisy.\n  link  is heavily based on   downlit  and especially   href_package()  and   autolink()  which do the actual work. We just go the extra mile and make this automatic by means of a   knitr  hook.\nThis very article uses   auto() , i.e. here is how it looks in rstudio:"
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html",
    "href": "posts/2024-01-31-january-2024/index.html",
    "title": "January 2024",
    "section": "",
    "text": "It’s already time to sunset 🌅 january, so let’s obey the tradition of rounding up what happened on the previous month. Ok this is mostly a motivational tradition at this point, as it has happened exactly zero times in the past, but you gotta start somewhere right ?!"
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html#xeus-r",
    "href": "posts/2024-01-31-january-2024/index.html#xeus-r",
    "title": "January 2024",
    "section": "xeus-r",
    "text": "xeus-r\nThis has been in the |&gt; line for a while, but we finally were able to announce the initial version of xeus-r and write 📝 about it the Jupyter blog. xeus-r is a Jupyter kernel for R that is, as the name implies, based on the strong foundations of Xeus. Working on bootstrapping this project with the QuantStack team has been a privilege. Our vision is that it is going to open many doors for the intersection of Jupyter and R users. There is still a lot to do, let’s go 🚀."
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html#tadascience",
    "href": "posts/2024-01-31-january-2024/index.html#tadascience",
    "title": "January 2024",
    "section": "tada⬢science",
    "text": "tada⬢science\nI bought the tada⬢science domain a while back, but did not do much with it apart from leaving some breadcrumbs 🍞 here and there, but I’ve now bit the bullet 🚄 and dived in to quarto to start structuring the site and this blog. It’s early days at the time of writing this wrapup, i.e. the landing page mostly contain a 🎉 emoji, but what else do you need really, that’s the best emoji.\nI’ve asked ChatGPT what a tada scientist is, and this is one of this cases where the 🤖 was a bit unimaginative and gave me the typo treatment:\n\nIt seems like there might be a typo in your question. Did you mean to ask about a “data scientist”? A data scientist is a professional who uses scientific methods, processes, algorithms, and systems to extract knowledge and insights from structured and unstructured data. They often apply their skills in statistics, data analysis, and machine learning to analyze data and generate actionable insights. If this is not what you meant, could you please clarify your question?\n\n… I would have prefered an hallucination 💭 in that instance, so I guess we are going to have to invent what is a tada⬢science, I’ll expand on that over time, but we can start with a new spin on the practice of data science. Let’s go from tidy data to tada duty 🤝."
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html#tada",
    "href": "posts/2024-01-31-january-2024/index.html#tada",
    "title": "January 2024",
    "section": "tada 🎉",
    "text": "tada 🎉\nThe tada 📦 was born and is currently in the release process 🏓 with CRAN. It currently only ships the pkg_roulette() function for a fun and engaging way to discover new R packages. You can find our more (not really) about it in this blog post but if you’re in a rush, here it is again.\n\n\n\n\n\nThis was received with a bit of curiosity and enthusiasm and a drop of “is that it?” from the community when I posted about it on linkedin and various other socials. I can relate to both the enthusiasm and the frustration, it’s a 🐣 package at this point. It will serve as a host for various tools to support the practice of tada⬢science."
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html#you-r",
    "href": "posts/2024-01-31-january-2024/index.html#you-r",
    "title": "January 2024",
    "section": "You & R",
    "text": "You & R\nOne of my commitments for 2024 is the You & R podcast, which I hinted at in this linkedin post. I received many applications through the survey I shared with the post, and I can’t wait to get started and have these conversations. You & R is meant to be people centered safe place where we exchange stories about how we relate to R. I’ll invite people across() 😉 the spectrum of trajectories. No matter where you ® in your journey with our favorite data science tool, your story matters, and we’re all in this together. I want to hear and amplify stories about new R users who give us the privilege to hop on board this ⛵️ with us, as well as more experience R users.\nI’m currently in the process of gearing up 🎙️🎧 🎥 and learning about things 🛠️ like riverside, so please bear with my while I upskill and stay tuned 🎶 for more You & R news."
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html#bandwidth",
    "href": "posts/2024-01-31-january-2024/index.html#bandwidth",
    "title": "January 2024",
    "section": "Bandwidth 🧘‍♂️",
    "text": "Bandwidth 🧘‍♂️\nThere is currently some available bandwidth here, so if you need a tada⬢scientist to help you with an R thing, please reach out, linkedin is probably your safest bet right now, but I’m also in other socials 🦅 🦋 🐘 🧶. I’m confident you’ll find me."
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html#never-search-alone",
    "href": "posts/2024-01-31-january-2024/index.html#never-search-alone",
    "title": "January 2024",
    "section": "Never Search Alone",
    "text": "Never Search Alone\nI’ve enrolled in a Job Search Council following the approach described in the Never Search Alone book 📖. Although, I would not say I’m actually job hunting per se, the approach and the group I’ve joined 💜 is flexible enough to accommodate the particularities of the tada⬢science journey. Finding about about Never Search Alone has been a pivotal moment in my transition from my previous work life. As much as fast reading the book front to cover in two days was exciting, actually doing the work with a JSC is another level, I would recommend it to anyone going through a work cross roads moment.\nLet’s see how it goes, but I’ll probably write about how I’m adapting the NSA approach to my specifics."
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html#reading",
    "href": "posts/2024-01-31-january-2024/index.html#reading",
    "title": "January 2024",
    "section": "Reading",
    "text": "Reading\nI’m committed to step up my reading habits, because there are a lot more things I want to apply my curiosity too. Last month I read Learning To Scale with my reading partner. Thanks again Diane 👸 for the recommendation, and the book. Learning to Lead, Leading to Learn is next on my list on the same theme.\n\n\n\n\n\nAlso finished Unbroken: the Trauma response is never wrong on a totally different topic. The trauma tapes is one of my favourite podcasts and the book goes further.\nWhat Now, with Trevor Noah is an another one of my favourite podcasts, and the episode featuring Kerry Washington is what converted me to sign up to Audible. This is a fascinating story. Next on my Audible queue is Viola Davis’s Finding Me.\nOn the more technical front, I’ll go through C++20: the complete guide because there seems to be a lot of interesting new things happening in C++ 🤓🚀."
  },
  {
    "objectID": "posts/2024-01-29-welcome-to-the-tadaverse/index.html",
    "href": "posts/2024-01-29-welcome-to-the-tadaverse/index.html",
    "title": "Welcome to the tada⬢verse",
    "section": "",
    "text": "This is the first article for the tada⬢science blog, so before we deep dive into changing the world, let’s have some fun 🛝.\nWhen I linkedined about the You & R upcoming podcast 🎙️ back in December, I shared some code on the survey with potential guests.\n\n\n\n\n\n… but as I’m getting ready to launch 🚀 soon - more on that shortly 🕥 🕥 🕗 🕔 - I wanted something a bit more fun, so I wrote the pkg_roulette() function this morning and giftwrapped 🎁 it up as the tada package that is on its way to CRAN. Over time, tada will get more tools and will serve as a host for all things tada⬢science.\n\nlibrary(tada)\n\n\n  🎉🎉                               🎉🎉\n  🎉🎉                               🎉🎉\n🎉🎉🎉🎉🎉🎉     🎉🎉🎉🎉🎉       🎉🎉🎉🎉🎉     🎉🎉🎉🎉🎉\n  🎉🎉                🎉🎉     🎉🎉   🎉🎉            🎉🎉\n  🎉🎉          🎉🎉🎉🎉🎉🎉   🎉🎉     🎉🎉   🎉🎉🎉🎉🎉🎉🎉\n  🎉🎉  🎉      🎉🎉     🎉🎉  🎉🎉     🎉🎉   🎉🎉      🎉🎉\n   🎉🎉🎉🎉      🎉🎉🎉🎉🎉     🎉🎉🎉🎉🎉🎉     🎉🎉🎉🎉🎉🎉\n\n\nThe pkg_roulette() gives you the time= and n= arguments to control how long the roulette runs and how many packages it shows. It goes increasingly slowly during that time. You can also control the colors it uses with the cols= argument. But you don’t need to, the defaults are fine.\n\ntada is on its way to CRAN, but you don’t need to wait, and you can start using it right now with:\n\npak::pak(\"tadascience/tada\")\n\n💡 You have ideas to improve it, awesome 👍 let’s chat about it on github, on linkedin, on X, on bluesky, on mastodon, on threads or however you usually get in touch.\n🦘 don’t go too far, I’ll be back in this blog."
  },
  {
    "objectID": "posts/2024-02-15-httr2-req-perform-stream-round/index.html",
    "href": "posts/2024-02-15-httr2-req-perform-stream-round/index.html",
    "title": "🧢 httr2::req_perform_stream(round = ) ⚾️",
    "section": "",
    "text": "httr2 is an amazing 📦 from the r-lib team. Built on top of the strong foundations of curl, experience from the previous incarnation with httr and tidy principles and design, httr2 is an easy goto for anything api related.\nBut … I found a bug 🪲, or let’s call it a missed opportunity 🤓. TL;DR it was fixed. Let’s rewind."
  },
  {
    "objectID": "posts/2024-02-15-httr2-req-perform-stream-round/index.html#in-da-beginning-there-was-emoji",
    "href": "posts/2024-02-15-httr2-req-perform-stream-round/index.html#in-da-beginning-there-was-emoji",
    "title": "🧢 httr2::req_perform_stream(round = ) ⚾️",
    "section": "In da beginning, there was emoji",
    "text": "In da beginning, there was emoji\n🎉 aka :tada: is the best emoji, this is not open for debate 😂.\n\n(tada &lt;- emo::ji(\"tada\"))\n\n🎉 \n\n\nLet’s dissect it with the help of 📦 utf8splain and uni I totally forgot about. tada is a single code point emoji U+1F389 aka \"\\U1F389\" in R:\n\ncat(\"\\U1F389\")\n\n🎉\n\ndplyr::filter(uni::code, rune == \"U+1F389\")\n\n# A tibble: 1 × 7\n      id rune    description     block                 countries languages type \n   &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;           &lt;chr&gt;                 &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;\n1 127881 U+1F389 \" Party Popper\" miscellaneous-symbol… &lt;NA&gt;      &lt;NA&gt;      &lt;NA&gt; \n\n\nIn utf-8, i.e. the encoding to rule them all, 🎉 is encoded with 4 bytes that follow the convention explained in the UTF-8 wikipedia page. 11110000 : starts with 11110 to indicate it is a 4 bytes encoded code point (or rune 🀄️), followed by 3 continuation bytes that start with 10 : 10011111, 10001110, 10001001.\n(I still don’t know how to reveal the ansi escape codes in quarto, so using a screenshot instead so that you have colors 🌈).\n\n\n\n\n\nJust like 🎉, many characters are encoded using more than on byte in utf-8 and other encodings."
  },
  {
    "objectID": "posts/2024-02-15-httr2-req-perform-stream-round/index.html#golem-poem",
    "href": "posts/2024-02-15-httr2-req-perform-stream-round/index.html#golem-poem",
    "title": "🧢 httr2::req_perform_stream(round = ) ⚾️",
    "section": "golem poem",
    "text": "golem poem\nWhile we’re in ThinkR realm (uni and utf8splain) are weekend 📦 we developed when I was working with them 💜, let’s look at what started this side quest of fixing a 🐞 in httr2. In the tada::verse() post I introduced a function to compose 📦 poems with ChatGPT via the mlverse/chattr package, and was annoyed that the function would not work to write a golem poem.\n&gt; chattr::chattr(\"Can you write a poem about the R package called 'golem'. Please add a bunch of emojis.\")\nSure! Here's a poem about the R package 'golem' with a bunch of emojis:\n\nError in `discard()`:\nℹ In index: 1.\nCaused by error:\n! `.p()` must return a single `TRUE` or `FALSE`, not `NA`.\nRun `rlang::last_trace()` to see where the error occurred.\nWarning messages:\n1: In strsplit(., \"data: \") :\n  unable to translate 'data: {\"id\":\"chatcmpl-8nsIIxlfPHfY8BhhuUu7NFsIO57AC\",\"object\":\"chat.completion.chunk\",\"created\":1706897470,\"model\":\"gpt-3.5-turbo-0613\",\"system_fingerprint\":null,\"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\"},\"logprobs\":null,\"finish_re...' to a wide string\n2: In strsplit(., \"data: \") : input string 1 is invalid\nThat was embarrassing and curbed my enthusiasm about sharing the poem with the team. I still did, but I had to use the normal ChatGPT app like a human instead of the api 😥."
  },
  {
    "objectID": "posts/2024-02-15-httr2-req-perform-stream-round/index.html#fixing-mlversechattr",
    "href": "posts/2024-02-15-httr2-req-perform-stream-round/index.html#fixing-mlversechattr",
    "title": "🧢 httr2::req_perform_stream(round = ) ⚾️",
    "section": "Fixing mlverse/chattr",
    "text": "Fixing mlverse/chattr\nmlerse/chattr is not the only R 📦 that can speak to ChatGPT and I successfully used irudnyts/openai for another similar quest with the valentine package that writes roses are red … poems about packages. This does work, e.g.\n\nvalentine::roses(\"golem\")\n\nRoses are red, 🌹\nGolem is neat, 💫\nWith R package power, 💪\nCoding dreams complete! ✨\n\n\nThe advantage of mlverse/chattr though is that is uses streaming to get tokens faster rather than wait for the whole poem to be composed.\nSo naturally, I went for a dive on how mlverse/chattr works, using snitch to get some understanding of its implementation, and sending a bottle in the issues in case the chattr team wanted to spare my quest.\nI sent a first clunky pull request that did the job, while looking kind of ugly and hacky. When that happens, that’s usually a good sign that this is a solution to the wrong problem, so I abandonned that PR and decided to go earlier in the 📦 chain and look at r-lib/httr2 because chattr uses httr2::req_perform_stream() to … process the stream.\nThe stream from ChatGPT is processed by fixed-size chunks of bytes, and so the problem was that on occasions, these chunks cut an emoji in the middle, which causes issues down the line:\n\ntad &lt;- charToRaw(tada)[1:3]\ntad\n\n[1] f0 9f 8e\n\nrawToChar(tad)\n\n[1] \"\\xf0\\x9f\\x8e\"\n\nnchar(tad)\n\n[1] 2 2 2\n\n\nThis confused other parts of the mlverse/chattr codebase."
  },
  {
    "objectID": "posts/2024-02-15-httr2-req-perform-stream-round/index.html#fixing-r-libhttr2",
    "href": "posts/2024-02-15-httr2-req-perform-stream-round/index.html#fixing-r-libhttr2",
    "title": "🧢 httr2::req_perform_stream(round = ) ⚾️",
    "section": "Fixing r-lib/httr2",
    "text": "Fixing r-lib/httr2\nNow that this was reframed as a missed r-lib/httr2 opportunity, and I had been looking for an excuse to peep on how httr2 works, I deep dived and opened a pull request last week. Hadley started to review it the next day and we 🏓 on it and iterated a few times until we were happy about it.\n\n\n\n\n\nIt is now merged, and so will be released as part of the next httr2 release, but you can take it for a spin with pak::pak(\"r-lib/httr2\").\nMy initial proposal was to add a req_perform_stream_lines(), based on the idea that if we know the stream is text encoded in utf-8, instead of streaming all the bytes, and taking the risk that chunks might cut emojis or other character mid rune, we can buffer the bytes and process line by line.\nThis kind of worked, but we ended up having the two sister functions req_perform_stream() and req_perform_stream_lines() that shared a lot of logic but were different. Something was off.\nWe continued to iterate, and Hadley has been as usual generous with reviewing and improving the pull request. Hadley even contributed the tests that allowed us to 🏃‍♂️ the last kilometer 💚.\nWe settled on adding the extra argument round= to the req_perform_stream() function, so that instead of processing fixed-size chunks of bytes, the callback function could receive a truncated sequence of bytes.\nHere is the updated documentation for req_perform_stream() :\n\nThe default behavior remains round = \"byte\" so that the risk of the pull request being dispruptive is minimal, so by default the full chunk of buffer_kb kilobytes is sent to the callback.\nThe added value of the pull request though is that you can now round = \"line\" so that the stream is buffered and cut at the last newline character, a new line is a character that is encoded in a single byte, i.e. its utf-8 representation is the same as its ascii 00001010 .\n\nutf8splain::runes(\"\\n\")\n\nutf-8 encoded string with 1 runes\n\nU+000A   0A   00001010    New Line (Nl) : line feed (lf) : end of line (eol) : LF\n\nutf8splain::bytes(\"\\n\")\n\n# A tibble: 1 × 4\n     id byte  decimal binary  \n  &lt;int&gt; &lt;raw&gt;   &lt;int&gt; &lt;chr&gt;   \n1     1 0a         10 00001010\n\n\nWe also contemplated on implementing round = \"utf8\" to round at the last valid utf-8 sequence, but we eventually arbitrated that it’s probably not worth it at this stage.\nBut round = is flexible enough to accomodate for other ways of rounding, and is passed through the internal httr2::as_round_function() :\n\nas_round_function &lt;- function(round = c(\"byte\", \"line\"),\n                              error_call = caller_env()) {\n  if (is.function(round)) {\n    check_function2(round, args = \"bytes\")\n    round\n  } else if (is.character(round)) {\n    round &lt;- arg_match(round, error_call = error_call)\n    switch(round,\n      byte = function(bytes) length(bytes),\n      line = function(bytes) which(bytes == charToRaw(\"\\n\"))\n    )\n  } else {\n    cli::cli_abort(\n      '{.arg round} must be \"byte\", \"line\" or a function.',\n      call = error_call\n    )\n  }\n}\n\nI’ll talk about cli_abort(), arg_match() and error_call some other day. Working on this pull request was great and I believe we end up with the right solution."
  },
  {
    "objectID": "posts/2024-02-15-httr2-req-perform-stream-round/index.html#fixing-mlversechattr-take-2",
    "href": "posts/2024-02-15-httr2-req-perform-stream-round/index.html#fixing-mlversechattr-take-2",
    "title": "🧢 httr2::req_perform_stream(round = ) ⚾️",
    "section": "Fixing mlverse/chattr, take 2",
    "text": "Fixing mlverse/chattr, take 2\nWith req_perform_stream(round = \"line\") it becomes much easier to fix the initial problem, so I could send a second pull request there, and now with the dev version of httr2 and the pull request of chattr we can finally enjoy the golem poem:\n\n# pak::pak(\"mlverse/chattr#65\")\nchattr::chattr_use(\"gpt35\")\n\n\n\n\n── chattr \n\n\n• Provider: Open AI - Chat Completions\n\n\n• Path/URL: https://api.openai.com/v1/chat/completions\n\n\n• Model: gpt-3.5-turbo\n\ntada::verse(\"golem\")\n\nSure! Here's a poem about the R package 'golem' with a bunch of emojis:\n\n🌟 In the land of R, a package was born,\n🔧 Its name was 'golem', a tool to adorn.\n🏗️ With 🧱 and 🏗️, it built apps with ease,\n🌈 Adding colors and interactivity, oh please!\n\n📦 'Golem' wrapped up shiny, like a gift,\n🎁 Making web apps with a magical lift.\n🌐 It brought the power of the web to R,\n🖥️ Creating interfaces that would take you far.\n\n🔮 With 'golem', your app could be grand,\n🎨 Customizing the UI with a wave of your hand.\n📊 Visualizations, charts, and graphs,\n📝 All made possible with 'golem's' crafts.\n\n🔒 Security was 'golem's' top priority,\n🔐 Protecting your app with utmost sincerity.\n🔁 Continuous integration, deployment made smooth,\n🚀 Launching your app with a confident groove.\n\n🌟 So, if you seek to build apps with flair,\n🔧 'Golem' is the package that's beyond compare.\n🏗️ With its help, your dreams will come true,\n🌈 Creating web apps that will surely woo!"
  },
  {
    "objectID": "posts/2024-02-17-raw-strings/index.html",
    "href": "posts/2024-02-17-raw-strings/index.html",
    "title": "🥩 raw strings 🧶",
    "section": "",
    "text": "… 🤦‍♂️ so a few days ago, the valentine 📦 hit CRAN, and on the morning of feb 14, I was eager to post something using it on various socials.\nI had already posted about it a few days ago using typical examples, e.g. valentine::roses(\"dplyr\"), or valentine::roses(\"data.table\") … so I wanted to post something different. 💡 the package had arrived on CRAN so why not inception it and do valentine::roses(\"valentine\").\nObviously, the 🤖 does not know anything about an R package called valentine, which is the perfect use case for the hint= argument so can be used to add something to the prompt before it is sent to ChatGPT through the irudnyts/openai package.\nI later realised I made a mistake, and so I almost 🗑️ the post to do it again, but then I thought I would write this post instead in the off chance that someone can learn from my mistake.\nCan you spot it ?"
  },
  {
    "objectID": "posts/2024-02-17-raw-strings/index.html#lets-talk-about-strings",
    "href": "posts/2024-02-17-raw-strings/index.html#lets-talk-about-strings",
    "title": "🥩 raw strings 🧶",
    "section": "Let’s talk about strings",
    "text": "Let’s talk about strings\nIn R, strings can contain \" and ' characters, the rules are simple. If you are inside a \" string, you can have a ' character, if you are inside a ' string, you can have a \" character without needing to escape them:\n\n\"hello 'world'\"\n\n[1] \"hello 'world'\"\n\n'bonjour \"monde\"'\n\n[1] \"bonjour \\\"monde\\\"\"\n\n\nAnd otherwise you need to escape them\n\n\"ciao \\\"mondo\\\"\"\n\n[1] \"ciao \\\"mondo\\\"\"\n\n'hola \\'mundo\\''\n\n[1] \"hola 'mundo'\""
  },
  {
    "objectID": "posts/2024-02-17-raw-strings/index.html#raw-strings-attached",
    "href": "posts/2024-02-17-raw-strings/index.html#raw-strings-attached",
    "title": "🥩 raw strings 🧶",
    "section": "raw strings attached",
    "text": "raw strings attached\n🤢 escaping strings is a pain, so R 4.0.0 included raw strings, which you can learn more about in this article from Josiah Parry. Bonus points for the Seinfeld gif."
  },
  {
    "objectID": "posts/2024-02-17-raw-strings/index.html#back-to-valentine-and",
    "href": "posts/2024-02-17-raw-strings/index.html#back-to-valentine-and",
    "title": "🥩 raw strings 🧶",
    "section": "Back to valentine and 🤦‍♂️",
    "text": "Back to valentine and 🤦‍♂️\nWe can then use raw strings to include a mix of single and double quotes, which is perfect for our use case here, because we can to augment the prompt valentine::roses() will compose with some information about what the package does.\n\n\n\n\n\n\nTip\n\n\n\nThe valentine package was released specially for this years’s valentine’s day, its description is: Uses ‘ChatGPT’ &lt;https://openai.com/&gt; to create poems about R packages. Currently contains the roses() function to make “roses are red, …” style poems and the prompt() function to only assemble the prompt without submitting it to ‘ChatGPT’.\n\n\nWe have a happy mix of double quotes “roses are red, …” and single quotes: ‘ChatGPT’ so we can use raw strings.\n\nhint &lt;- r\"( The valentine package was released specially for this years's valentine's day, its description is: Uses 'ChatGPT' &lt;https://openai.com/&gt; to create poems about R packages. Currently contains the roses() function to make \"roses are red, ...\" style poems and the prompt() function to only assemble the prompt without submitting it to 'ChatGPT'. )\"\nhint\n\n[1] \" The valentine package was released specially for this years's valentine's day, its description is: Uses 'ChatGPT' &lt;https://openai.com/&gt; to create poems about R packages. Currently contains the roses() function to make \\\"roses are red, ...\\\" style poems and the prompt() function to only assemble the prompt without submitting it to 'ChatGPT'. \"\n\n\nWe would just need to supply hint to the corresponding argument, i.e. valentine::roses(\"valentine\", hint = r\"( ... )\") except that instead 🤦‍♂️ I included \"valentine\" in the raw string.\nChatGPT did not care much, but had to work from a weird prompt:\n\nvalentine::prompt(r\"(valentine\", hint = \"The valentine package [...] it to 'ChatGPT'.))\")\n\nMake a 4 lines \"roses are red ...\" poem about the R package \"valentine\", hint = \"The valentine package [...] it to 'ChatGPT'.)\". Include a bunch of emojis. \n\n\ninstead of:\n\nvalentine::prompt(\"valentine\", hint = r\"(The valentine package [...] it to 'ChatGPT'.))\")\n\nMake a 4 lines \"roses are red ...\" poem about the R package \"valentine\". Include a bunch of emojis. The valentine package [...] it to 'ChatGPT'.)"
  }
]