[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "🌹 Spread the 💜 for R 📦 with valentine::roses()\n\n\n\n\n\n\npackage\n\n\nvalentine\n\n\npoetry\n\n\nai\n\n\nlove\n\n\n\nvalentine is a small R packages that uses ChatGPT via the openai package to generate roses are red … poetry about R packages. \n\n\n\n\n\nFeb 14, 2024\n\n\nRomain François\n\n\n\n\n\n\n\n\n\n\n\n\n📦 react\n\n\n\n\n\n\npackage\n\n\nreact\n\n\nshiny\n\n\n\nreact is a tiny package that intends to help with shiny reactivity\n\n\n\n\n\nFeb 9, 2024\n\n\nRomain François\n\n\n\n\n\n\n\n\n\n\n\n\nsnitch\n\n\n\n\n\n\nR\n\n\nsnitch\n\n\n\nThe experimental snitch 📦 spies on functions and packages. The name and logo are inspired from the Harry Potter world. \n\n\n\n\n\nFeb 4, 2024\n\n\nRomain François\n\n\n\n\n\n\n\n\n\n\n\n\ntada::verse() poetry\n\n\n\n\n\n\nR\n\n\nai\n\n\npoetry\n\n\ntada\n\n\n\nThe tada::verse() function writes poetry️ 🦋 about your R package 📦. \n\n\n\n\n\nFeb 2, 2024\n\n\nRomain François\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 2024\n\n\n\n\n\n\nwrapup\n\n\n\n📆 wrapping up january 2024 at tada⬢science, this was a busy month 🎉\n\n\n\n\n\nJan 31, 2024\n\n\nRomain François\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome to the tada⬢verse\n\n\n\n\n\n\ntada\n\n\npackage\n\n\nR\n\n\n\nThe tada⬢verse is a collection of 1 opinionated package for tada⬢science. Developed by the tada⬢science team of 😷 1, the tada⬢verse is built to flip and spin data 📊 into tada 🎉.\n\n\n\n\n\nJan 29, 2024\n\n\nRomain François\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-02-14-roses-are-red/index.html",
    "href": "posts/2024-02-14-roses-are-red/index.html",
    "title": "🌹 Spread the 💜 for R 📦 with valentine::roses()",
    "section": "",
    "text": "To get ready, at least in the R world 😝, for Valentine’s day, I’ve cooked a little R 📦 to spread the love by generating Roses are Red, … poems about packages using ChatGPT though the openai package.\nYou can install it with pak::pak(\"tadascience/valentine\") and perhaps it will be released to CRAN in time for Valentine’s day, it’s in the pipeline.\nIf you are not already set with an OPENAI_API_KEY, see you later in this article, otherwise let’s make some 🤖 poetry 🪶 📝\n\nvalentine::roses(\"tidyverse\")\n\n🌹 Roses are red, 📦\n✨ tidyverse is my love, 💕\n💡 It makes coding fun, 🤩\n🌈 With tidy data, I rise above! 📊\n\n\nYou can tweak the prompt that is sent with the hint= argument.\n\nvalentine::roses(\"lubridate\", hint = \"make it kinky\")\n\nRoses are red 🌹\nLubridate keeps time in your bed 🕒💤\nDate parsing and manipulation so fine 😍💃\nIt's the R package that sparks a kinky line! 🔥😉\n\n\nBefore you can use valentine::roses() you need to be setup with an API key you can get from OpenAI. Once you’re there, click the “Create new secret key”, name it whatever you like:\n\n\n\n\n\nAnd then copy the secret key.\n\n\n\n\n\n… and store it in your .Renviron file, e.g. by using usethis::edit_r_environ()\n\n\n\n\n\nRestart R, and 🦆\n\nvalentine::roses(\"data.table\")\n\nRoses are 🔴, \nData.table is 💪,\nEfficient and 🚀,\nIt's a 🎁 to me!"
  },
  {
    "objectID": "posts/2024-02-09-react/index.html",
    "href": "posts/2024-02-09-react/index.html",
    "title": "📦 react",
    "section": "",
    "text": "I’ve had a few opportunities to do some shiny apps recently, and an old itch resurfaced, and so what I tend to do in those situations is make a package 📦, so let me introduce the react package. it’s on CRAN already, so you can get it the usual ways.\nPerhaps you are here because you believe this has something to do with React, and in that case I’m sorry to disappoint. However, please stay, I won’t use much of your time 🐇.\nTake this code for a simple shiny server function:\n\nserver &lt;- function(input, output) {\n\n  dataInput &lt;- reactive({\n    getSymbols(input$symb, src = \"yahoo\",\n               from = input$dates[1],\n               to = input$dates[2],\n               auto.assign = FALSE)\n  })\n\n  output$plot &lt;- renderPlot({\n    chartSeries(dataInput(), theme = chartTheme(\"white\"),\n                type = \"line\", log.scale = input$log, TA = NULL)\n  })\n\n}\n\nIt defines the dataInput reactive, and then uses it in the renderPlot(expr=) context by calling the function, i.e. dataInput() . The issue that I have with this is that one cannot distinguish easily between a call to a reactive expression, and a simple function call, e.g. a geom_point() call.\nThe react package is there to help with this insignificant problem. Given the same reactive, with this 📦 you can instead invoke it with one of these forms: react$dataInput , react[dataInput] or react[dataInput()] so that the server code becomes for example:\n\nserver &lt;- function(input, output) {\n\n  dataInput &lt;- reactive({\n    getSymbols(input$symb, src = \"yahoo\",\n               from = input$dates[1],\n               to = input$dates[2],\n               auto.assign = FALSE)\n  })\n\n  output$plot &lt;- renderPlot({\n    chartSeries(react$dataInput, theme = chartTheme(\"white\"),\n                type = \"line\", log.scale = input$log, TA = NULL)\n  })\n\n}\n\nWhat I like about this is that it makes inputs and reactive look more alike, and also makes it easier to search for reactive calls in your ide, etc …\nThe dev version also make react an identity function, so that you can have a 4th alternative: react(dataInput()) and here the idea is that you’d also wrap inputs, e.g. react(input$symb) for improved discoverability. This will, unless I realize it’s dumb 😵‍💫 be released in the spring 🌱 version of react"
  },
  {
    "objectID": "posts/2024-02-02-tada-verse-poems/index.html",
    "href": "posts/2024-02-02-tada-verse-poems/index.html",
    "title": "tada::verse() poetry",
    "section": "",
    "text": "I just received the Thanks, on its way to CRAN email 📧 about the tada package 🎉, so it’s a good time for a celebration, and what better way to celebrate than with a dash of poetry.\nThe @dev version gains a verse() function to write poetry about R packages, thanks for the heavy lifting of the mlverse/chattr 📦. We try to maintain a @main branch that could be released at any time, and chattr is not yet released. We hope it will be for the spring 🌤️ release of tada, but it will be for the meantime available in the @dev branch.\n\n\n\n\n\n── chattr \n\n\n• Provider: Open AI - Chat Completions\n\n\n• Path/URL: https://api.openai.com/v1/chat/completions\n\n\n• Model: gpt-3.5-turbo\n\n\nSo let’s dive right in and do some ggplot2 poetry 🪶\n\n\n\n\n\nFor additional fun, we can write some poetry about a random package we discover with tada::pkg_roulette()\n\ntada::pkg_roulette() |&gt; tada::verse()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "tada<span style='color:pink; font-size: 120%'>⬢</span>science",
    "section": "",
    "text": "🎉"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/2024-01-29-welcome-to-the-tadaverse/index.html",
    "href": "posts/2024-01-29-welcome-to-the-tadaverse/index.html",
    "title": "Welcome to the tada⬢verse",
    "section": "",
    "text": "This is the first article for the tada⬢science blog, so before we deep dive into changing the world, let’s have some fun 🛝.\nWhen I linkedined about the You & R upcoming podcast 🎙️ back in December, I shared some code on the survey with potential guests.\n\n\n\n\n\n… but as I’m getting ready to launch 🚀 soon - more on that shortly 🕥 🕥 🕗 🕔 - I wanted something a bit more fun, so I wrote the pkg_roulette() function this morning and giftwrapped 🎁 it up as the tada package that is on its way to CRAN. Over time, tada will get more tools and will serve as a host for all things tada⬢science.\n\nlibrary(tada)\n\n\n  🎉🎉                               🎉🎉\n  🎉🎉                               🎉🎉\n🎉🎉🎉🎉🎉🎉     🎉🎉🎉🎉🎉       🎉🎉🎉🎉🎉     🎉🎉🎉🎉🎉\n  🎉🎉                🎉🎉     🎉🎉   🎉🎉            🎉🎉\n  🎉🎉          🎉🎉🎉🎉🎉🎉   🎉🎉     🎉🎉   🎉🎉🎉🎉🎉🎉🎉\n  🎉🎉  🎉      🎉🎉     🎉🎉  🎉🎉     🎉🎉   🎉🎉      🎉🎉\n   🎉🎉🎉🎉      🎉🎉🎉🎉🎉     🎉🎉🎉🎉🎉🎉     🎉🎉🎉🎉🎉🎉\n\n\nThe pkg_roulette() gives you the time= and n= arguments to control how long the roulette runs and how many packages it shows. It goes increasingly slowly during that time. You can also control the colors it uses with the cols= argument. But you don’t need to, the defaults are fine.\n\ntada is on its way to CRAN, but you don’t need to wait, and you can start using it right now with:\n\npak::pak(\"tadascience/tada\")\n\n💡 You have ideas to improve it, awesome 👍 let’s chat about it on github, on linkedin, on X, on bluesky, on mastodon, on threads or however you usually get in touch.\n🦘 don’t go too far, I’ll be back in this blog."
  },
  {
    "objectID": "posts/2024-02-04-snitch/index.html",
    "href": "posts/2024-02-04-snitch/index.html",
    "title": "snitch",
    "section": "",
    "text": "The snitch 📦 is one of those weekend experiments. In this particular case, it comes from I don’t know how to use base::trace() and I want a thing that tells me how a particular function is called, so I want to spy on a function.\nThe name and logo of the package might be because I’ve started to read the first Harry Potter book to my 6 years old daughter 🧙.\nDALL-E gave a decent logo once I removed explicit HP references 🤷‍♂️, i.e. “a small gold colored spherical object with wings” instead of “the golden snitch”:\n\nCan you make an hexagon logo for an R package called snitch, inspired by a small gold colored spherical object with wings. The package goal is to spy on function calls.\n\nAnyway 🤖, let’s dive in, you can install it with pak::pak(\"tadascience/snitch\") I’m not sure at this point this will make its way to CRAN.\nThe package has snitch::fun() to spy on a function … (I don’t know how to get the colors in quarto so let’s go with a screenshot). You first get a rule with breadcrumbs of functions that are spyed on, and then their arguments, courtesy of ls.str() :\n\n\n\n\n\n… and snitch::pkg() to spy on functions from a package.\n\nsuppressPackageStartupMessages(library(dplyr))\nsnitch::pkg(\"dplyr\", pattern = \"^summarise_\")\n\nmtcars %&gt;%\n  summarise(mean = mean(disp), n = n())\n\n── summarise_cols ──────────────────────────────────────────────────────────────\n   by : List of 3\n    $ type : chr \"ungrouped\"\n    $ names: chr(0) \n    $ data : tibble [1 × 1] (S3: tbl_df/tbl/data.frame)\n   data : 'data.frame': 32 obs. of  11 variables:\n    $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n    $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n    $ disp: num  160 160 108 258 360 ...\n    $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n    $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n    $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n    $ qsec: num  16.5 17 18.6 19.4 17 ...\n    $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n    $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n    $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n    $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n   dots : List of 2\n    $ mean: language ~mean(disp)\n    $ n   : language ~n()\n   error_call : &lt;environment: 0x107937698&gt; \n   verb :  chr \"summarise\"\n── summarise_cols ⬢ FUN ────────────────────────────────────────────────────────\n   mask : Classes 'DataMask', 'R6' &lt;DataMask&gt;\n     Public:\n       add_one: function (name, chunks, result) \n       clone: function (deep = FALSE) \n       current_cols: function (vars) \n       current_key: function () \n       current_non_group_vars: function () \n       current_rows: function () \n       current_vars: function () \n       eval_all: function (quo) \n       eval_all_filter: function (quos, env_filter) \n       eval_all_mutate: function (quo) \n       eval_all_summarise: function (quo) \n       forget: function () \n       get_current_data: function (groups = TRUE) \n       get_current_group_id: function () \n       get_current_group_id_mutable: function () \n       get_current_group_size: function () \n       get_current_group_size_mutable: function () \n       get_keys: function () \n       get_rlang_mask: function () \n       get_rows: function () \n       get_size: function () \n       get_used: function () \n       initialize: function (data, by, verb, error_call) \n       is_grouped: function () \n       is_rowwise: function () \n       pick_current: function (vars) \n       remove: function (name) \n       resolve: function (name) \n       set_current_group: function (group) \n       unused_vars: function () \n     Private:\n       by_names: \n       chops: environment\n       current_data: list\n       env_current_group_info: environment\n       env_mask_bindings: environment\n       grouped: FALSE\n       keys: tbl_df, tbl, data.frame\n       rows: vctrs_list_of, vctrs_vctr, list\n       rowwise: FALSE\n       size: 32\n       verb: summarise \n   quo :  language ~mean(disp)\n── summarise_cols ⬢ FUN ────────────────────────────────────────────────────────\n   mask : Classes 'DataMask', 'R6' &lt;DataMask&gt;\n     Public:\n       add_one: function (name, chunks, result) \n       clone: function (deep = FALSE) \n       current_cols: function (vars) \n       current_key: function () \n       current_non_group_vars: function () \n       current_rows: function () \n       current_vars: function () \n       eval_all: function (quo) \n       eval_all_filter: function (quos, env_filter) \n       eval_all_mutate: function (quo) \n       eval_all_summarise: function (quo) \n       forget: function () \n       get_current_data: function (groups = TRUE) \n       get_current_group_id: function () \n       get_current_group_id_mutable: function () \n       get_current_group_size: function () \n       get_current_group_size_mutable: function () \n       get_keys: function () \n       get_rlang_mask: function () \n       get_rows: function () \n       get_size: function () \n       get_used: function () \n       initialize: function (data, by, verb, error_call) \n       is_grouped: function () \n       is_rowwise: function () \n       pick_current: function (vars) \n       remove: function (name) \n       resolve: function (name) \n       set_current_group: function (group) \n       unused_vars: function () \n     Private:\n       by_names: \n       chops: environment\n       current_data: list\n       env_current_group_info: environment\n       env_mask_bindings: environment\n       grouped: FALSE\n       keys: tbl_df, tbl, data.frame\n       rows: vctrs_list_of, vctrs_vctr, list\n       rowwise: FALSE\n       size: 32\n       verb: summarise \n   quo :  language ~n()\n── summarise_build ─────────────────────────────────────────────────────────────\n   by : List of 3\n    $ type : chr \"ungrouped\"\n    $ names: chr(0) \n    $ data : tibble [1 × 1] (S3: tbl_df/tbl/data.frame)\n   cols : List of 3\n    $ new    :List of 2\n    $ sizes  : int 1\n    $ all_one: logi TRUE\n\n\n      mean  n\n1 230.7219 32\n\n\nIs it useful, I don’t know, but I like it, and I prefer typing snitch::fun() than remembering how to use trace()."
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html",
    "href": "posts/2024-01-31-january-2024/index.html",
    "title": "January 2024",
    "section": "",
    "text": "It’s already time to sunset 🌅 january, so let’s obey the tradition of rounding up what happened on the previous month. Ok this is mostly a motivational tradition at this point, as it has happened exactly zero times in the past, but you gotta start somewhere right ?!"
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html#xeus-r",
    "href": "posts/2024-01-31-january-2024/index.html#xeus-r",
    "title": "January 2024",
    "section": "xeus-r",
    "text": "xeus-r\nThis has been in the |&gt; line for a while, but we finally were able to announce the initial version of xeus-r and write 📝 about it the Jupyter blog. xeus-r is a Jupyter kernel for R that is, as the name implies, based on the strong foundations of Xeus. Working on bootstrapping this project with the QuantStack team has been a privilege. Our vision is that it is going to open many doors for the intersection of Jupyter and R users. There is still a lot to do, let’s go 🚀."
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html#tadascience",
    "href": "posts/2024-01-31-january-2024/index.html#tadascience",
    "title": "January 2024",
    "section": "tada⬢science",
    "text": "tada⬢science\nI bought the tada⬢science domain a while back, but did not do much with it apart from leaving some breadcrumbs 🍞 here and there, but I’ve now bit the bullet 🚄 and dived in to quarto to start structuring the site and this blog. It’s early days at the time of writing this wrapup, i.e. the landing page mostly contain a 🎉 emoji, but what else do you need really, that’s the best emoji.\nI’ve asked ChatGPT what a tada scientist is, and this is one of this cases where the 🤖 was a bit unimaginative and gave me the typo treatment:\n\nIt seems like there might be a typo in your question. Did you mean to ask about a “data scientist”? A data scientist is a professional who uses scientific methods, processes, algorithms, and systems to extract knowledge and insights from structured and unstructured data. They often apply their skills in statistics, data analysis, and machine learning to analyze data and generate actionable insights. If this is not what you meant, could you please clarify your question?\n\n… I would have prefered an hallucination 💭 in that instance, so I guess we are going to have to invent what is a tada⬢science, I’ll expand on that over time, but we can start with a new spin on the practice of data science. Let’s go from tidy data to tada duty 🤝."
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html#tada",
    "href": "posts/2024-01-31-january-2024/index.html#tada",
    "title": "January 2024",
    "section": "tada 🎉",
    "text": "tada 🎉\nThe tada 📦 was born and is currently in the release process 🏓 with CRAN. It currently only ships the pkg_roulette() function for a fun and engaging way to discover new R packages. You can find our more (not really) about it in this blog post but if you’re in a rush, here it is again.\n\n\n\n\n\nThis was received with a bit of curiosity and enthusiasm and a drop of “is that it?” from the community when I posted about it on linkedin and various other socials. I can relate to both the enthusiasm and the frustration, it’s a 🐣 package at this point. It will serve as a host for various tools to support the practice of tada⬢science."
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html#you-r",
    "href": "posts/2024-01-31-january-2024/index.html#you-r",
    "title": "January 2024",
    "section": "You & R",
    "text": "You & R\nOne of my commitments for 2024 is the You & R podcast, which I hinted at in this linkedin post. I received many applications through the survey I shared with the post, and I can’t wait to get started and have these conversations. You & R is meant to be people centered safe place where we exchange stories about how we relate to R. I’ll invite people across() 😉 the spectrum of trajectories. No matter where you ® in your journey with our favorite data science tool, your story matters, and we’re all in this together. I want to hear and amplify stories about new R users who give us the privilege to hop on board this ⛵️ with us, as well as more experience R users.\nI’m currently in the process of gearing up 🎙️🎧 🎥 and learning about things 🛠️ like riverside, so please bear with my while I upskill and stay tuned 🎶 for more You & R news."
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html#bandwidth",
    "href": "posts/2024-01-31-january-2024/index.html#bandwidth",
    "title": "January 2024",
    "section": "Bandwidth 🧘‍♂️",
    "text": "Bandwidth 🧘‍♂️\nThere is currently some available bandwidth here, so if you need a tada⬢scientist to help you with an R thing, please reach out, linkedin is probably your safest bet right now, but I’m also in other socials 🦅 🦋 🐘 🧶. I’m confident you’ll find me."
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html#never-search-alone",
    "href": "posts/2024-01-31-january-2024/index.html#never-search-alone",
    "title": "January 2024",
    "section": "Never Search Alone",
    "text": "Never Search Alone\nI’ve enrolled in a Job Search Council following the approach described in the Never Search Alone book 📖. Although, I would not say I’m actually job hunting per se, the approach and the group I’ve joined 💜 is flexible enough to accommodate the particularities of the tada⬢science journey. Finding about about Never Search Alone has been a pivotal moment in my transition from my previous work life. As much as fast reading the book front to cover in two days was exciting, actually doing the work with a JSC is another level, I would recommend it to anyone going through a work cross roads moment.\nLet’s see how it goes, but I’ll probably write about how I’m adapting the NSA approach to my specifics."
  },
  {
    "objectID": "posts/2024-01-31-january-2024/index.html#reading",
    "href": "posts/2024-01-31-january-2024/index.html#reading",
    "title": "January 2024",
    "section": "Reading",
    "text": "Reading\nI’m committed to step up my reading habits, because there are a lot more things I want to apply my curiosity too. Last month I read Learning To Scale with my reading partner. Thanks again Diane 👸 for the recommendation, and the book. Learning to Lead, Leading to Learn is next on my list on the same theme.\n\n\n\n\n\nAlso finished Unbroken: the Trauma response is never wrong on a totally different topic. The trauma tapes is one of my favourite podcasts and the book goes further.\nWhat Now, with Trevor Noah is an another one of my favourite podcasts, and the episode featuring Kerry Washington is what converted me to sign up to Audible. This is a fascinating story. Next on my Audible queue is Viola Davis’s Finding Me.\nOn the more technical front, I’ll go through C++20: the complete guide because there seems to be a lot of interesting new things happening in C++ 🤓🚀."
  }
]