{
  "hash": "e1014f1ce376e19d1704c89fc6c73fa9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"📦 react\"\ndescription: \"react is a tiny package that intends to help with shiny reactivity\"\nauthor:\n  - name: Romain François\n    affiliation: tada⬢science\n    affiliation-url: https://tada.science\ndate: 2024-02-09\ncategories: [package, react, shiny]\nimage: react.png\ncitation: \n  url: https://tada.science/posts/2024-02-09-react\ndraft: false\n---\n\n\n<a href=\"https://react.tada.science\"><img src=\"react.png\" align=\"left\" height=\"138\"/></a> I've had a few opportunities to do some shiny apps recently, and an old itch resurfaced, and so what I tend to do in those situations is make a package 📦, so let me introduce the [react](https://react.tada.science) package. it's on CRAN already, so you can get it the usual ways.\n\nPerhaps you are here because you believe this has something to do with [React](https://react.dev), and in that case I'm sorry to disappoint. However, please stay, I won't use much of your time 🐇.\n\nTake this code for a simple shiny server function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output) {\n\n  dataInput <- reactive({\n    getSymbols(input$symb, src = \"yahoo\",\n               from = input$dates[1],\n               to = input$dates[2],\n               auto.assign = FALSE)\n  })\n\n  output$plot <- renderPlot({\n    chartSeries(dataInput(), theme = chartTheme(\"white\"),\n                type = \"line\", log.scale = input$log, TA = NULL)\n  })\n\n}\n```\n:::\n\n\nIt defines the `dataInput` reactive, and then uses it in the `renderPlot(expr=)` context by calling the function, i.e. `dataInput()` . The issue that I have with this is that one cannot distinguish easily between a call to a reactive expression, and a simple function call, e.g. a `geom_point()` call.\n\nThe `react` package is there to help with this *insignificant* problem. Given the same reactive, with this 📦 you can instead invoke it with one of these forms: `react$dataInput` , `react[dataInput]` or `react[dataInput()]` so that the server code becomes for example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output) {\n\n  dataInput <- reactive({\n    getSymbols(input$symb, src = \"yahoo\",\n               from = input$dates[1],\n               to = input$dates[2],\n               auto.assign = FALSE)\n  })\n\n  output$plot <- renderPlot({\n    chartSeries(react$dataInput, theme = chartTheme(\"white\"),\n                type = \"line\", log.scale = input$log, TA = NULL)\n  })\n\n}\n```\n:::\n\n\nWhat I like about this is that it makes inputs and reactive look more alike, and also makes it easier to search for reactive calls in your ide, etc ...\n\nThe dev version also make `react` an identity function, so that you can have a 4th alternative: `react(dataInput())` and here the idea is that you'd also wrap inputs, e.g. `react(input$symb)` for improved discoverability. This will, unless I realize it's dumb 😵‍💫 be released in the spring 🌱 version of `react`\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}